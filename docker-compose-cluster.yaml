---
version: "3.3"
services:
  # Sensu Backend Cluster
  #
  # Includes embedded database, API, event processor, and web UI).
  #
  # See: https://docs.sensu.io/sensu-go/latest/reference/backend/
  sensu-backend:
    image: sensu/sensu:${SENSU_BACKEND_VERSION}
    depends_on:
    - etcd
    deploy:
      resources:
        limits:
          cpus: "1.0"
          memory: "2048M"
    labels:
    - io.sensu.role=sensu-backend
    ports: []
    environment:
    - SENSU_INTERNAL_ENVIRONMENT
    - SENSU_ETCD_CLIENT_URLS
    - SENSU_NO_EMBED_ETCD=true
    - SENSU_WORKSHOP_ENV_SECRET
    - SUMOLOGIC_HTTP_SOURCE_URL
    volumes:
    - type: volume
      source: sensu_data
      target: /var/lib/sensu
    healthcheck:
      test: wget -q -O- http://127.0.0.1:8080/health
      interval: 10s
      timeout: 5s
      retries: 6
    command: >-
      sensu-backend start
      --log-level=warn
      --debug=false
      --no-embed-etcd
      --etcd-client-urls ${SENSU_ETCD_CLIENT_URLS}

  # Sensu Agent
  #
  # Includes monitoring agent, local API, and local StatsD socket.
  #
  # See: https://docs.sensu.io/sensu-go/latest/reference/agent/
  sensu-agent:
    image: sensu/sensu:${SENSU_AGENT_VERSION}
    depends_on:
    - sensu-backend
    deploy:
      resources:
        limits:
          memory: 256M
    labels:
    - io.sensu.role=sensu-agent
    ports:
    - ${SENSU_API_PORT}/tcp
    - ${SENSU_STATSD_METRICS_PORT}/udp
    environment:
    - SENSU_BACKEND_URL=ws://sensu-lb:8081
    - SENSU_AGENT_PASSWORD
    - SENSU_NAMESPACE
    - SENSU_SUBSCRIPTIONS
    - SENSU_KEEPALIVE_INTERVAL=5
    - SENSU_KEEPALIVE_WARNING_THRESHOLD=10
    - SENSU_KEEPALIVE_CRITICAL_THRESHOLD=20
    - SENSU_API_HOST
    - SENSU_API_PORT
    - SENSU_STATSD_METRICS_HOST
    - SENSU_STATSD_METRICS_PORT
    volumes:
    - type: tmpfs
      target: /var/lib/sensu
    healthcheck:
      test: wget -q -O- http://127.0.0.1:3031/healthz
      interval: 10s
      timeout: 5s
      retries: 6
    command: >-
      sensu-agent start
      --log-level=info
      --deregister=true
      --detect-cloud-provider
      --labels="environment=training,workshop_version=${WORKSHOP_SENSU_VERSION}"
      --statsd-event-handlers influxdb
      --password ${SENSU_AGENT_PASSWORD}

  # Sensu Backend Load Balancer
  #
  # HAproxy load balancer
  #
  # See: http://haproxy.org/#docs
  sensu-lb:
    image: haproxy:${HAPROXY_VERSION}
    depends_on:
    - sensu-backend
    deploy:
      resources:
        limits:
          memory: 64M
    labels:
    - io.sensu.role=sensu-lb
    ports:
    - 3000:3000
    - 8080:8080
    - 8081:8081
    environment: []
    volumes:
    - type: bind
      source: ./config/haproxy/haproxy.cfg
      target: /usr/local/etc/haproxy/haproxy.cfg
    healthcheck:
      test: wget -q -O- -U "Docker health check (wget)" http://127.0.0.1:8404/stats
      interval: 10s
      timeout: 5s
      retries: 6

  # Etcd
  #
  # Standalone etcd server.
  #
  # See: https://etcd.io/docs/v3.4.0/op-guide/container/#running-a-single-node-etcd-1
  etcd:
    image: gcr.io/etcd-development/etcd:${ETCD_VERSION}
    deploy:
      resources:
        limits:
          memory: 1024M
    labels:
    - io.sensu.role=sensu-backend-etcd
    ports:
    - 2379:2379
    - 2380:2380
    environment:
    - ETCD_HOST
    volumes:
    - type: volume
      source: etcd_data
      target: /var/lib/etcd
    healthcheck:
      test: ETCDCTL_API=3 etcdctl --endpoints=http://127.0.0.1:2379 endpoint health
      interval: 10s
      timeout: 5s
      retries: 6
    command: >-
      /usr/local/bin/etcd
      --data-dir=/var/lib/etcd
      --name etcd-1
      --initial-cluster-state "new"
      --initial-advertise-peer-urls "http://${ETCD_HOST}:2380"
      --listen-peer-urls "http://0.0.0.0:2380"
      --advertise-client-urls "http://${ETCD_HOST}:2379"
      --listen-client-urls "http://0.0.0.0:2379"
      --initial-cluster "etcd-1=http://${ETCD_HOST}:2380"

  # Postgres
  #
  # Sensu data store.
  #
  # See: https://www.postgresql.org/docs/
  postgres:
    image: postgres:${POSTGRES_VERSION}
    deploy:
      resources:
        limits:
          memory: 1024M
    labels:
    - io.sensu.role=postgres
    ports:
    - 5432
    environment:
    - POSTGRES_USER
    - POSTGRES_PASSWORD
    - POSTGRES_DB
    - PGDATA=/var/lib/postgresql/data
    - SENSU_BACKEND_CLUSTER_ADMIN_USERNAME
    - SENSU_BACKEND_CLUSTER_ADMIN_PASSWORD
    - APP_DB_USERNAME
    - APP_DB_PASSWORD
    - APP_DB_NAME
    - MATTERMOST_DB
    - MATTERMOST_ADMIN_USER
    - MATTERMOST_ADMIN_PASSWORD
    volumes:
    - type: bind
      source: ./config/postgres/postgresql.conf
      target: /etc/postgresql/postgresql.conf
    - type: bind
      source: ./config/postgres/scripts/
      target: /docker-entrypoint-initdb.d/
    - type: volume
      source: postgres_data
      target: /var/lib/postgresql/data
    healthcheck:
      test: pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}
      interval: 10s
      timeout: 5s
      retries: 6

  # Demo App
  #
  # See: https://github.com/portertech/demo-app
  app:
    image: portertech/demo-app:latest
    deploy:
      resources:
        limits:
          memory: 64M
    labels:
    - io.sensu.role=app
    ports:
    - 9001-9005:8080/tcp
    environment:
    - DB_HOST=${APP_DB_HOST}
    - DB_PORT=${APP_DB_PORT}
    - DB_USER=${APP_DB_USERNAME}
    - DB_PASS=${APP_DB_PASSWORD}
    - DB_NAME=${APP_DB_NAME}
    volumes: []
    healthcheck:
      test: curl -XGET -I http://127.0.0.1:8080/healthz
      interval: 10s
      timeout: 5s
      retries: 6
    command: >-
      /usr/bin/demo-app

  # Sensu Asset Server
  #
  # Serve Sensu Assets over HTTP using NGINX.
  #
  # See: https://nginx.org/en/docs/
  sensu-assets:
    image: "nginx:${NGINX_VERSION}"
    deploy:
      resources:
        limits:
          memory: 64M
    labels:
    - io.sensu.role=asset-server
    ports:
    - 8000:80
    environment: []
    volumes:
    - type: bind
      source: ./config/nginx/nginx.conf
      target: /etc/nginx/nginx.conf
    - type: volume
      source: asset_data
      target: /usr/share/nginx/html/assets
    - type: volume
      source: user_data
      target: /usr/share/nginx/html/users
    healthcheck:
      test: curl -s -I -A "Docker health check (curl)" http://127.0.0.1:80/
      interval: 10s
      timeout: 5s
      retries: 6

  # Sensu Asset SMB Adapter
  #
  # Upload assets to the workshop Sensu Assets service via SMB.
  #
  # See: https://www.samba.org/samba/docs/
  sensu-assets-smb:
    build:
      context: ./docker/sensu-assets/
      dockerfile: Dockerfile.debian
      args:
      - WORKSHOP_PASSWORD
    image: sensu-assets:latest
    deploy:
      resources:
        limits:
          memory: 64M
    labels:
    - io.sensu.role=asset-server
    ports:
    - 139:139
    - 445:445
    environment: []
    volumes:
    - type: bind
      source: ./config/samba/smb.conf
      target: /etc/samba/smb.conf
    - type: volume
      source: asset_data
      target: /home/sensu/assets
    healthcheck:
      test: smbstatus --brief
      interval: 10s
      timeout: 5s
      retries: 6
    command: smbd --foreground --log-stdout --configfile /etc/samba/smb.conf

  # Vault
  #
  # Includes a Vault "devmode" server for secrets management.
  #
  # See: https://www.vaultproject.io/docs
  vault:
    image: vault:${VAULT_VERSION}
    deploy:
      resources:
        limits:
          memory: 256M
    labels:
    - io.sensu.role=secrets-manager
    ports:
    - 8200:8200
    environment:
    - VAULT_DEV_ROOT_TOKEN_ID
    - VAULT_DEV_LISTEN_ADDRESS
    volumes:
      - type: volume
        source: workshop_data
        target: /vault/logs
        consistency: consistent
      - type: volume
        source: workshop_data
        target: /vault/file
        consistency: consistent
    healthcheck:
      test: wget -q -O- http://127.0.0.1:8200/v1/sys/health
      interval: 10s
      timeout: 5s
      retries: 6
    healthcheck:
      test: "true"
      interval: 10s
      timeout: 5s
      retries: 6
    command: >-
      vault server -dev -log-level debug

  # Mattermost
  #
  # Includes a Mattermost deployment for workshop alerts and workshop chat.
  #
  # See: https://mattermost.com
  mattermost:
    image: mattermost/mattermost-team-edition:${MATTERMOST_VERSION}
    deploy:
      resources:
        limits:
          memory: 512M
    labels:
    - io.sensu.role=chat
    ports:
    - 8065:8065
    extra_hosts:
    - "dockerhost:127.0.0.1"
    environment:
    - MATTERMOST_DB=${MATTERMOST_DB}
    - MATTERMOST_ADMIN_USER=${MATTERMOST_ADMIN_USER}
    - MATTERMOST_ADMIN_PASSWORD=${MATTERMOST_ADMIN_PASSWORD}
    - MM_SQLSETTINGS_DRIVERNAME=postgres
    - MM_SQLSETTINGS_DATASOURCE=postgres://${MATTERMOST_ADMIN_USER}:${MATTERMOST_ADMIN_PASSWORD}@postgres/${MATTERMOST_DB}?sslmode=disable&connect_timeout=10
    - MM_TEAMSETTINGS_ENABLEOPENSERVER=false
    - MM_PASSWORDSETTINGS_MINIMUMLENGTH=8
    - MM_PASSWORDSETTINGS_LOWERCASE=true
    - MM_PASSWORDSETTINGS_UPPERCASE=false
    - MM_PASSWORDSETTINGS_NUMBER=false
    - MM_PASSWORDSETTINGS_SYMBOL=false
    volumes:
    - type: volume
      source: mattermost_config
      target: /mattermost/config
      consistency: consistent
    - type: volume
      source: mattermost_data
      target: /mattermost/data
      consistency: consistent
    - type: bind
      source: ./config/mattermost/data.jsonl
      target: /mattermost/data/data.jsonl
      consistency: consistent
    - type: bind
      source: ./config/mattermost/profile.jpg
      target: /mattermost/profile.jpg
      consistency: consistent
    - type: volume
      source: mattermost_logs
      target: /mattermost/logs
      consistency: consistent
    - type: volume
      source: mattermost_plugins
      target: /mattermost/plugins
      consistency: consistent
    - type: volume
      source: mattermost_plugins_extra
      target: /mattermost/client/plugins
      consistency: consistent
    healthcheck:
      test: wget -q -O- http://127.0.0.1:8065/api/v4/system/ping
      interval: 10s
      timeout: 5s
      retries: 6

  # Configurator
  #
  # Configuration automation for user profile generation using
  # a super light-weight "configuration management" stack:
  #
  # - curl
  # - jq
  # - envsubst (part of the gettext package)
  # - sensuctl
  # - docker & docker-compose
  #
  # See: ./scripts/
  configurator:
    build:
      context: ./
      dockerfile: Dockerfile
      args:
      - SENSU_CLI_VERSION
      - VAULT_VERSION
      - MATTERMOST_VERSION
    image: workshop:${SENSU_CLI_VERSION}
    depends_on:
    - etcd
    - mattermost
    deploy:
      resources:
        limits:
          memory: 64M
      restart_policy:
        condition: on-failure
        max_attempts: ${WORKSHOP_SETUP_RETRIES}
    labels:
    - io.sensu.role=configurator
    ports: []
    environment:
    - SENSU_BACKEND_CLUSTER_ADMIN_USERNAME
    - SENSU_BACKEND_CLUSTER_ADMIN_PASSWORD
    - SENSU_BACKEND_CLUSTER_ADMIN_API_KEY
    - SENSU_ETCD_CLIENT_URLS
    - SENSU_API_URL
    - VAULT_ADDR
    - VAULT_TOKEN
    - WORKSHOP_HOSTNAME
    - WORKSHOP_SENSU_VERSION
    - WORKSHOP_SENSU_BUILD
    - WORKSHOP_DEFAULT_TRAINEE_PASSWORD
    - MATTERMOST_ADMIN_USER
    - MATTERMOST_ADMIN_PASSWORD
    - SENSU_CLUSTER_EXTRAS=config/sensu/store
    volumes:
    - type: bind
      source: /var/run/docker.sock
      target: /var/run/docker.sock
    - type: bind
      source: ./.env
      target: /workshop/.env
    - type: bind
      source: ./${COMPOSE_FILE}
      target: /workshop/${COMPOSE_FILE}
    - type: bind
      source: ./docker
      target: /workshop/docker
    - type: bind
      source: ./scripts
      target: /usr/local/bin/scripts
    - type: bind
      source: ./users
      target: /workshop/users
    - type: bind
      source: ./config/sensu
      target: /workshop/config/sensu
      consistency: consistent
    - type: bind
      source: ./config/vault
      target: /workshop/config/vault
      consistency: consistent
    - type: volume
      source: user_data
      target: /users
    command: |-
      init-workshop

volumes:
  workshop_data:
    driver: local
  sensu_data:
    driver: local
  etcd_data:
    driver: local
  postgres_data:
    driver: local
  asset_data:
    driver: local
  user_data:
    driver: local
  grafana_data:
    driver: local
  influxdb_data:
    driver: local
  timescaledb_data:
    driver: local
  prometheus_data:
    driver: local
  elasticsearch_data:
    driver: local
  mongo_data:
    driver: local
  mattermost_config:
    driver: local
  mattermost_data:
    driver: local
  mattermost_logs:
    driver: local
  mattermost_plugins:
    driver: local
  mattermost_plugins_extra:
    driver: local
