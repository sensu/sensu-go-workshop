#!/bin/sh

SENSU_API_URL=${SENSU_API_URL:-"http://sensu-backend:8080"}
SENSU_API_KEY=${SENSU_BACKEND_CLUSTER_ADMIN_API_KEY}
SENSU_NAMESPACE=${SENSU_NAMESPACE:-"default"}
SENSU_CLUSTER_CONFIG=${SENSU_CLUSTER_CONFIG:-"config/sensu/cluster"}
SENSU_CLUSTER_EXTRAS=${SENSU_CLUSTER_EXTRAS:-""}
SENSU_WORKSHOP_SEEDS=${SENSU_WORKSHOP_SEEDS:-"config/sensu/seeds"}
USERS_JSON=${USERS_JSON:-"users/users.json"}
SENSU_WORKSHOP_ENVRC_TEMPLATE=${SENSU_WORKSHOP_ENVRC_TEMPLATE:-"users/user.envrc.template"}
SENSU_WORKSHOP_PS1_TEMPLATE=${SENSU_WORKSHOP_PS1_TEMPLATE:-"users/user.envrc.ps1.template"}
SENSU_WORKSHOP_USER_ENV_FILES=${SENSU_WORKSHOP_USER_ENV_FILES:-"/users"}
VAULT_ADDR=${VAULT_ADDR:-"http://vault:8200"}
VAULT_DEV_ROOT_TOKEN_ID=${VAULT_DEV_ROOT_TOKEN_ID:-"secretsmanager"}
VAULT_SECRET_PATH_PREFIX=${VAULT_SECRET_PATH_PREFIX:-"secret/sensu"}
VAULT_WORKSHOP_SEEDS=${VAULT_WORKSHOP_SEEDS:-"config/vault/secrets"}

check_deps() {
  for DEP in sensuctl vault
  do
    command -v ${DEP} > /dev/null 2>&1
    if [ $? -ne 0 ]; then
      echo "Missing required dependency: \"${DEP}\""
      exit 127
    fi
  done
}

validate_io() {
  if [ ! -d ${VAULT_WORKSHOP_SEEDS} ]; then
    echo "Missing or invalid namespace seeding secrets: \"${VAULT_WORKSHOP_SEEDS}\" (must be a directory)"
    echo ""
    exit 2
  fi
  if [ ! -d ${SENSU_WORKSHOP_SEEDS} ]; then
    echo "Missing or invalid namespace seeding resources: \"${SENSU_WORKSHOP_SEEDS}\" (must be a directory)"
    echo ""
    exit 2
  fi
  if [ ! -d ${SENSU_WORKSHOP_USER_ENV_FILES} ]; then
    echo "Missing or invalid env file path: \"${SENSU_WORKSHOP_USER_ENV_FILES}\" (must be a directory)"
    echo ""
    exit 2
  fi
}

validate_api_urls() {
  curl -XGET ${SENSU_API_URL}/health > /dev/null 2>&1
  if [ $? -ne 0 ]; then
    echo "No Sensu API found at ${SENSU_API_URL}"
    echo ""
    exit 2
  fi
  curl -XGET ${VAULT_ADDR}/v1/sys/health > /dev/null 2>&1
  if [ $? -ne 0 ]; then
    echo "No Vault API found at ${VAULT_ADDR}"
    echo ""
    exit 2
  fi
}

seed_cluster() {
  echo "Applying cluster configuration from ${SENSU_CLUSTER_CONFIG}"
  sleep 5
  /usr/local/bin/sensuctl --api-url ${SENSU_API_URL} --api-key ${SENSU_API_KEY} create -rf ${SENSU_CLUSTER_CONFIG}
  if [ $? -ne 0 ]; then
    echo "Error encountered while seeding workshop cluster configuration"
    echo ""
    exit 2
  fi
}

seed_extras() {
  if [ ! -z ${SENSU_CLUSTER_EXTRAS} ]; then
    if [ ! -d ${SENSU_CLUSTER_EXTRAS} ]; then
      echo "Missing or invalid cluster extras: \"${SENSU_CLUSTER_EXTRAS}\" (must be a directory)"
      echo ""
      exit 2
    else
      echo "Applying extra configuration from ${SENSU_CLUSTER_EXTRAS}"
      /usr/local/bin/sensuctl --api-url ${SENSU_API_URL} --api-key ${SENSU_API_KEY} create -rf ${SENSU_CLUSTER_EXTRAS}
      if [ $? -ne 0 ]; then
        echo "Error encountered while seeding workshop cluster extras"
        echo ""
        exit 2
      fi
    fi
  fi
}

seed_namespaces() {
  for NAMESPACE in $(/usr/local/bin/sensuctl --api-url ${SENSU_API_URL} --api-key ${SENSU_API_KEY} namespace list --format json | jq -r .[].name)
  do
    echo "Seeding namespace '${NAMESPACE}' with resource templates in ${SENSU_WORKSHOP_SEEDS}"
    /usr/local/bin/sensuctl --api-url ${SENSU_API_URL} --api-key ${SENSU_API_KEY} create -rf ${SENSU_WORKSHOP_SEEDS} --namespace ${NAMESPACE}
    if [ $? -ne 0 ]; then
      echo "Error encountered while seeding workshop user namespaces"
      echo ""
      exit 2
    fi
  done
}

initialize_workshop_chat() {
  echo "Initializing Mattermost service..."
  docker-compose exec -T mattermost /mattermost/bin/mattermost import bulk /mattermost/data/data.jsonl --validate > /dev/null 2>&1
  if [ $? -gt 0 ]; then
    echo "Failed to initialize Mattermost via bulk import."
    echo ""
    exit 2
  fi
  docker-compose exec -T mattermost /mattermost/bin/mattermost import bulk /mattermost/data/data.jsonl --apply > /dev/null 2>&1
  if [ $? -gt 0 ]; then
    echo "Failed to initialize Mattermost via bulk import."
    echo ""
    exit 2
  else
    echo "Successfully initialized Mattermost service!"
    echo ""
  fi
}

seed_workshop_chat() {
  echo "Seeding Mattermost service..."
  mmctl auth login http://mattermost:8065 --name sensu-workshop --username sensu --password workshop > /dev/null 2>&1
  export MATTERMOST_WEBHOOK_URL="http://mattermost:8065/hooks/$(mmctl webhook create-incoming --channel workshop:alerts --user sensu --format json | jq -r .id)"
  echo "{\"webhook_url\": \"${MATTERMOST_WEBHOOK_URL}\", \"ttl\": \"30s\"}" | jq . > ${VAULT_WORKSHOP_SEEDS}/mattermost.json
  if [ $? -gt 0 ]; then
    echo "Failed to create a Mattermost incoming webhook."
    echo ""
    exit 2
  else
    echo "Successfully created a Mattermost incoming webhook!"
    echo ""
  fi
  # TODO: add a for-loop to add Mattermost users for instructor-led workshop
}

seed_user_envrc_files() {
  for USER in $( cat "${USERS_JSON}" | jq -r '.[] | @base64' | sort -u); do
    export USERNAME_ORIGINAL=$(echo ${USER} | base64 -d | jq -r .username)
    export USERNAME=$(echo ${USERNAME_ORIGINAL} | awk -F "@" '{print $1}')
    export PASSWORD=$(echo ${USER} | base64 -d | jq -r .password)
    if [ -z ${PASSWORD} ]; then
      export PASSWORD=${WORKSHOP_PASSWORD}
    fi
    export USER_API_KEY=$(/usr/local/bin/sensuctl --api-url ${SENSU_API_URL} --api-key ${SENSU_API_KEY} api-key grant ${USERNAME} | awk -F "/" '{print $NF}')
    echo "Generating user .envrc file: ${SENSU_WORKSHOP_USER_ENV_FILES}/${USERNAME}.envrc"
    cat ${SENSU_WORKSHOP_ENVRC_TEMPLATE} | envsubst | tee ${SENSU_WORKSHOP_USER_ENV_FILES}/${USERNAME}.envrc > /dev/null 2>&1
    echo "Generating user .envrc.ps1 file: ${SENSU_WORKSHOP_USER_ENV_FILES}/${USERNAME}.envrc.ps1"
    cat ${SENSU_WORKSHOP_PS1_TEMPLATE} | envsubst | tee ${SENSU_WORKSHOP_USER_ENV_FILES}/${USERNAME}.envrc.ps1 > /dev/null 2>&1
  done
  echo ""
}

seed_secrets() {
  for SECRET in $(ls ${VAULT_WORKSHOP_SEEDS})
  do
    NAME=$(echo $SECRET | cut -d "." -f 1)
    echo "Seeding Vault with secret key: ${VAULT_SECRET_PATH_PREFIX}/${NAME}"
    vault kv put ${VAULT_SECRET_PATH_PREFIX}/${NAME} @${VAULT_WORKSHOP_SEEDS}/${SECRET} > /dev/null 2>&1
    vault kv get --format json ${VAULT_SECRET_PATH_PREFIX}/${NAME} | jq .data.data
  done
  echo ""
}

echo "Seeding Sensu Go Workshop resources..."
check_deps && \
validate_io && \
validate_api_urls && \
seed_extras && \
seed_cluster && \
seed_namespaces && \
seed_user_envrc_files && \
initialize_workshop_chat && \
seed_workshop_chat && \
seed_secrets
if [ $? -gt 0 ]; then
  echo "Failed to create Sensu user accounts."
  echo ""
  exit 2
fi
echo ""
exit 0
